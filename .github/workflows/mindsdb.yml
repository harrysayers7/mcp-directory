name: MindsDB MCP Server

on:
  push:
    paths:
      - 'servers/mindsdb/**'
      - 'libs/mcp_common/**'
      - '.github/workflows/mindsdb.yml'
  pull_request:
    paths:
      - 'servers/mindsdb/**'
      - 'libs/mcp_common/**'
      - '.github/workflows/mindsdb.yml'
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"
  SERVER_NAME: "mindsdb"

jobs:
  # Lint and format check
  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV
        run: pip install uv

      - name: Install dependencies
        run: |
          cd servers/${{ env.SERVER_NAME }}
          uv sync --dev

      - name: Run Ruff linter
        run: |
          cd servers/${{ env.SERVER_NAME }}
          ruff check src/ tests/ --output-format=github
          ruff format --check src/ tests/

      - name: Run MyPy type checker
        run: |
          cd servers/${{ env.SERVER_NAME }}
          mypy src/

  # Unit tests
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    
    services:
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install UV
        run: pip install uv

      - name: Install dependencies
        run: |
          cd servers/${{ env.SERVER_NAME }}
          uv sync --dev

      - name: Run unit tests
        env:
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          LOG_LEVEL: INFO
        run: |
          cd servers/${{ env.SERVER_NAME }}
          pytest tests/ \
            --cov=src/mindsdb_mcp_server \
            --cov-report=xml \
            --cov-report=html \
            --junitxml=test-results.xml \
            -v

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./servers/${{ env.SERVER_NAME }}/coverage.xml
          flags: ${{ env.SERVER_NAME }}
          name: ${{ env.SERVER_NAME }}-coverage

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ env.SERVER_NAME }}
          path: |
            servers/${{ env.SERVER_NAME }}/test-results.xml
            servers/${{ env.SERVER_NAME }}/htmlcov/

  # Integration tests with MindsDB
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      mindsdb:
        image: mindsdb/mindsdb:latest
        env:
          MINDSDB_APIS: http,mysql,mongodb,postgres,mcp
          MINDSDB_MCP_ACCESS_TOKEN: test-token
        options: >-
          --health-cmd "curl -f http://localhost:47334/api/status || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
        ports:
          - 47334:47334  # HTTP API
          - 47335:47335  # MySQL
          - 47336:47336  # MongoDB
          - 47337:47337  # MCP

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV
        run: pip install uv

      - name: Install dependencies
        run: |
          cd servers/${{ env.SERVER_NAME }}
          uv sync --dev

      - name: Wait for MindsDB to be ready
        run: |
          timeout 300 bash -c 'until curl -f http://localhost:47334/api/status; do sleep 5; done'

      - name: Run integration tests
        env:
          MINDSDB_API_KEY: test-key
          MINDSDB_HOST: http://localhost
          MINDSDB_PORT: 47334
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          LOG_LEVEL: INFO
        run: |
          pytest tests/integration/test_mindsdb_integration.py \
            --cov=src/mindsdb_mcp_server \
            --cov-report=xml \
            --cov-report=html \
            --junitxml=integration-test-results.xml \
            -v

      - name: Upload integration test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results-${{ env.SERVER_NAME }}
          path: |
            servers/${{ env.SERVER_NAME }}/integration-test-results.xml
            servers/${{ env.SERVER_NAME }}/htmlcov/

  # Build Docker image
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/mcp-${{ env.SERVER_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: servers/${{ env.SERVER_NAME }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Security scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV
        run: pip install uv

      - name: Install dependencies
        run: |
          cd servers/${{ env.SERVER_NAME }}
          uv sync --dev

      - name: Run security scans
        run: |
          cd servers/${{ env.SERVER_NAME }}
          # Bandit security linting
          bandit -r src/ -f json -o bandit-report.json
          
          # Safety dependency check
          safety check --json --output safety-report.json

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports-${{ env.SERVER_NAME }}
          path: |
            servers/${{ env.SERVER_NAME }}/bandit-report.json
            servers/${{ env.SERVER_NAME }}/safety-report.json

  # Performance test
  performance:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV
        run: pip install uv

      - name: Install dependencies
        run: |
          cd servers/${{ env.SERVER_NAME }}
          uv sync --dev

      - name: Run performance tests
        env:
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          LOG_LEVEL: WARNING
        run: |
          cd servers/${{ env.SERVER_NAME }}
          # Run performance tests with pytest-benchmark
          pytest tests/ -m "not slow" --benchmark-only --benchmark-save=performance

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-results-${{ env.SERVER_NAME }}
          path: |
            servers/${{ env.SERVER_NAME }}/.benchmarks/

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, integration, security]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy MindsDB MCP Server to staging
        run: |
          echo "Deploying MindsDB MCP Server to staging environment..."
          # Add your deployment commands here
          # Example: kubectl apply -f k8s/staging/mindsdb/

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, integration, security, performance]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy MindsDB MCP Server to production
        run: |
          echo "Deploying MindsDB MCP Server to production environment..."
          # Add your deployment commands here
          # Example: kubectl apply -f k8s/production/mindsdb/

  # Notify on failure
  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [lint, test, build, integration, security]
    if: failure()
    
    steps:
      - name: Notify failure
        run: |
          echo "MindsDB MCP Server CI/CD pipeline failed. Please check the logs."
          # Add your notification logic here
          # Example: Send Slack notification, email, etc.
